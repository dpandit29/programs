class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        vector<vector<int>>res;
        vector<int>ans;
        map<int,map<int,vector<int>>> nodes;
        queue<pair<TreeNode*,pair<int,int>>>q;
        if(root==NULL)
        {
            return res;
        }
        q.push(make_pair(root,make_pair(0,0)));
        while(!q.empty())
        {
            pair<TreeNode*,pair<int,int>>temp=q.front();
            TreeNode*frontnode=temp.first;
            int hr=temp.second.first;
            int lvl=temp.second.second;

            nodes[hr][lvl].push_back(frontnode->val);
            if(frontnode->left)
            {
                q.push(make_pair(frontnode->left,make_pair(hr-1,lvl+1)));
            }

            if(frontnode->right)
            {
                q.push(make_pair(frontnode->right,make_pair(hr-1,lvl+1)));
            }


        }
        for(auto i:nodes)
        {
            for(auto j:i.second)
            {
                for(auto k:j.second)
                {
                    ans.push_back(k);
                }
               
            }
             res.push_back(ans);
        }
        return res;
        
    }
};
